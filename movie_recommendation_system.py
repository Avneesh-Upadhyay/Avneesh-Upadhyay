# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NfyqCYr0piZUnC22CeTUg7fNCio5E7D3

Movie Recommendation System

Objective  - The primary goal of  this movie recommendation systems is to filter and predict only those movies that a corresponding user is most likely to want to watch.

Data Source  - ybi foundation github datasets

Import Library
"""

import pandas as pd

import numpy as np

"""Import Data"""

df  =  pd.read_csv("https://github.com/YBIFoundation/Dataset/raw/main/Movies%20Recommendation.csv")

df.head()

"""Describe Data"""

df.describe()

"""Data visualization"""

df.shape

df.columns

"""Data Preprocessing

Get Feature Selection
"""

df_features = df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

df_features.shape

df_features

x = df_features['Movie_Genre']+ ' ' + df_features['Movie_Keywords']+ ' ' + df_features['Movie_Tagline']+ ' ' + df_features['Movie_Cast']+ ' ' + df_features['Movie_Director']

x

x.shape

"""Get Feature Text conversion to Tokens"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

x = tfidf.fit_transform(x)

x.shape

print(x)

"""Get Similarity Score using Cosine Similarity"""

from sklearn.metrics.pairwise import cosine_similarity

similarity_score = cosine_similarity(x)

similarity_score

similarity_score.shape

"""Get Movie Name as Input from user and validate for closest Spelling"""

Favourite_Movie_Name = input("Enter Your Favourite Movie Name : ")

All_Movies_Title_List = df['Movie_Title'].tolist()

import difflib

Movie_Recommendation  = difflib.get_close_matches(Favourite_Movie_Name,All_Movies_Title_List)
print(Movie_Recommendation)

close_Match = Movie_Recommendation[0]
print(close_Match)

Index_of_close_Match_Movie = df[df.Movie_Title == close_Match]['Movie_ID'].values[0]
print(Index_of_close_Match_Movie)

"""Getting a list of Similar Movies"""

Recommendation_score = list(enumerate(similarity_score[Index_of_close_Match_Movie]))
print(Recommendation_score)

len(Recommendation_score)

"""Get All Movies Sort Based on Recommendation score wrt Favourite Movie"""

sorted_similar_movies = sorted(Recommendation_score,key = lambda x:x[1],reverse = True)
print(sorted_similar_movies)

"""Top 30 Movies suggested for you"""

print("Top 30 Movies suggested for you : ")
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.index == index]['Movie_Title'].values[0]
  if(i<31):
    print(i, '.',title_from_index)
    i+=1

Favourite_Movie_Name = input("Enter Your Favourite Movie Name : ")
All_Movies_Title_List = df['Movie_Title'].tolist()
Movie_Recommendation  = difflib.get_close_matches(Favourite_Movie_Name,All_Movies_Title_List)
close_Match = Movie_Recommendation[0]
Index_of_close_Match_Movie = df[df.Movie_Title == close_Match]['Movie_ID'].values[0]
Recommendation_score = list(enumerate(similarity_score[Index_of_close_Match_Movie]))
sorted_similar_movies = sorted(Recommendation_score,key = lambda x:x[1],reverse = True)

print("Top 10 Movies suggested for you : ")
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.index == index]['Movie_Title'].values[0]
  if(i<11):
    print(i, '.',title_from_index)
    i+=1